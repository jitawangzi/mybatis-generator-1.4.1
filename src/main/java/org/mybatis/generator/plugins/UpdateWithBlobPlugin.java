package org.mybatis.generator.plugins;

import java.util.List;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.Interface;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.codegen.mybatis3.ListUtilities;
import org.mybatis.generator.codegen.mybatis3.MyBatis3FormattingUtilities;

/**
 * MyBatis Generator插件，用于修改updateByPrimaryKey方法，使其包含BLOB字段，
 * 并且去掉生成updateByPrimaryKeyWithBLOBs方法和XML。
 * 使用一个方法来实现更新，方便反射调用更新方法
 */
public class UpdateWithBlobPlugin extends PluginAdapter {

    @Override
    public boolean validate(List<String> warnings) {
        return true;
    }

	/**
	 * 不生成updateByPrimaryKeyWithBLOBs方法
	 */
    @Override
	public boolean clientUpdateByPrimaryKeyWithBLOBsMethodGenerated(Method method, Interface interfaze,
			IntrospectedTable introspectedTable) {
		return false;
    }

	/**
	 * 不生成updateByPrimaryKeyWithBLOBs的XML
	 */
    @Override
	public boolean sqlMapUpdateByPrimaryKeyWithBLOBsElementGenerated(XmlElement element, IntrospectedTable introspectedTable) {
		return false;
    }

	/**
	 * 修改updateByPrimaryKey方法，使其包含BLOB字段，生成固定的SET子句
	 */
    @Override
	public boolean sqlMapUpdateByPrimaryKeyWithoutBLOBsElementGenerated(XmlElement element, IntrospectedTable introspectedTable) {

		// 如果没有BLOB字段，使用默认生成逻辑
		if (!introspectedTable.hasBLOBColumns()) {
			return true;
		}

		// 清空原有内容
		element.getElements().clear();
		element.getAttributes().clear();

		// 重新设置属性 - 使用WithBLOBs类型作为参数类型
		element.addAttribute(new Attribute("id", "updateByPrimaryKey"));

		String parameterType;
		if (introspectedTable.getRules().generateRecordWithBLOBsClass()) {
			parameterType = introspectedTable.getRecordWithBLOBsType();
		} else {
			parameterType = introspectedTable.getBaseRecordType();
		}
		element.addAttribute(new Attribute("parameterType", parameterType));

		// 添加注释
		element.addElement(new TextElement("<!--"));
		element.addElement(new TextElement("  WARNING - @mbg.generated"));
		element.addElement(new TextElement("  This element is automatically generated by MyBatis Generator, do not modify."));
		element.addElement(new TextElement("-->"));

		// 构建UPDATE语句
		StringBuilder sb = new StringBuilder();
		sb.append("update ");
		sb.append(introspectedTable.getFullyQualifiedTableNameAtRuntime());
		element.addElement(new TextElement(sb.toString()));

		// 构建SET子句 - 固定格式，不使用动态SQL
		sb.setLength(0);
		sb.append("set ");

		List<IntrospectedColumn> columns = ListUtilities.removeGeneratedAlwaysColumns(introspectedTable.getNonPrimaryKeyColumns());

		for (int i = 0; i < columns.size(); i++) {
			IntrospectedColumn introspectedColumn = columns.get(i);

			if (i > 0) {
				sb.append(",");
				element.addElement(new TextElement(sb.toString()));
				sb.setLength(0);
				sb.append("  ");
			}

			sb.append(MyBatis3FormattingUtilities.getEscapedColumnName(introspectedColumn));
			sb.append(" = ");
			sb.append(MyBatis3FormattingUtilities.getParameterClause(introspectedColumn));

			// 如果是最后一个字段，不添加逗号
			if (i == columns.size() - 1) {
				element.addElement(new TextElement(sb.toString()));
			}
		}

		// 添加WHERE子句
		boolean and = false;
		for (IntrospectedColumn introspectedColumn : introspectedTable.getPrimaryKeyColumns()) {
			sb.setLength(0);
			if (and) {
				sb.append("  and ");
			} else {
				sb.append("where ");
				and = true;
			}

			sb.append(MyBatis3FormattingUtilities.getEscapedColumnName(introspectedColumn));
			sb.append(" = ");
			sb.append(MyBatis3FormattingUtilities.getParameterClause(introspectedColumn));
			element.addElement(new TextElement(sb.toString()));
		}

		return true;
    }

	/**
	 * 确保Mapper接口中的updateByPrimaryKey方法使用WithBLOBs参数类型
	 */
    @Override
	public boolean clientUpdateByPrimaryKeyWithoutBLOBsMethodGenerated(Method method, Interface interfaze,
			IntrospectedTable introspectedTable) {

		// 如果有BLOB字段，修改方法参数类型
		if (introspectedTable.hasBLOBColumns()) {
			// 确保方法名是updateByPrimaryKey
			method.setName("updateByPrimaryKey");

			// 确保参数类型使用WithBLOBs类型（如果存在）
			if (introspectedTable.getRules().generateRecordWithBLOBsClass()) {
				method.getParameters().clear();

				// 正确创建FullyQualifiedJavaType
				FullyQualifiedJavaType parameterType = new FullyQualifiedJavaType(introspectedTable.getRecordWithBLOBsType());

				method.addParameter(new Parameter(parameterType, "record"));
            }
        }

        return true;
    }
}
