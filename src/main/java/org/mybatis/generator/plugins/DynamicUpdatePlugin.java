package org.mybatis.generator.plugins;

import java.util.List;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.Interface;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.Document;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.codegen.mybatis3.MyBatis3FormattingUtilities;

/**
 * MyBatis Generator插件，用于生成动态更新方法和XML。
 * 通过传入数据库字段名和对应值，实现动态更新字段。
 */
public class DynamicUpdatePlugin extends PluginAdapter {

	@Override
	public boolean validate(List<String> warnings) {
		return true;
	}

	@Override
	public boolean sqlMapDocumentGenerated(Document document, IntrospectedTable introspectedTable) {
		XmlElement rootElement = document.getRootElement();
		XmlElement updateElement = generateDynamicUpdateXml(introspectedTable);
		if (updateElement != null) {
			rootElement.addElement(updateElement);
		}
		return true;
	}

	@Override
	public boolean clientGenerated(Interface interfaze, IntrospectedTable introspectedTable) {
		Method method = generateDynamicUpdateMethod(introspectedTable);
		if (method != null) {
			interfaze.addMethod(method);
		}
		return true;
	}

	private XmlElement generateDynamicUpdateXml(IntrospectedTable introspectedTable) {
		XmlElement updateElement = new XmlElement("update");
		updateElement.addAttribute(new Attribute("id", "updateColumnsByPrimaryKey"));

		// 添加注释
		updateElement.addElement(new TextElement("<!--"));
		updateElement.addElement(new TextElement("  WARNING - @mbg.generated"));
		updateElement.addElement(new TextElement("  This element is automatically generated by MyBatis Generator, do not modify."));
		updateElement.addElement(new TextElement("-->"));

		// UPDATE语句
		StringBuilder sb = new StringBuilder();
		sb.append("update ");
		sb.append(introspectedTable.getFullyQualifiedTableNameAtRuntime());
		updateElement.addElement(new TextElement(sb.toString()));

		// 动态SET子句
		XmlElement setElement = new XmlElement("set");

		// 为每个非主键列生成动态更新
		for (IntrospectedColumn column : introspectedTable.getNonPrimaryKeyColumns()) {
			XmlElement ifElement = new XmlElement("if");
			sb.setLength(0);
			sb.append("params != null and params.containsKey('");
			sb.append(MyBatis3FormattingUtilities.getEscapedColumnName(column));
			sb.append("')");
			ifElement.addAttribute(new Attribute("test", sb.toString()));

			sb.setLength(0);
			sb.append(MyBatis3FormattingUtilities.getEscapedColumnName(column));
			sb.append(" = #{params.");
			sb.append(MyBatis3FormattingUtilities.getEscapedColumnName(column));
			if (column.getJdbcTypeName() != null) {
				sb.append(",jdbcType=").append(column.getJdbcTypeName());
			}
			sb.append("},");

			ifElement.addElement(new TextElement(sb.toString()));
			setElement.addElement(ifElement);
		}

		updateElement.addElement(setElement);

		// WHERE子句
		boolean and = false;
		for (IntrospectedColumn column : introspectedTable.getPrimaryKeyColumns()) {
			sb.setLength(0);
			if (and) {
				sb.append("  and ");
			} else {
				sb.append("where ");
				and = true;
			}

			sb.append(MyBatis3FormattingUtilities.getEscapedColumnName(column));
			sb.append(" = ");
			sb.append("#{").append(column.getJavaProperty());
			if (column.getJdbcTypeName() != null) {
				sb.append(",jdbcType=").append(column.getJdbcTypeName());
			}
			sb.append("}");
			updateElement.addElement(new TextElement(sb.toString()));
		}

		return updateElement;
	}

	private Method generateDynamicUpdateMethod(IntrospectedTable introspectedTable) {
		Method method = new Method("updateColumnsByPrimaryKey");
		method.setReturnType(FullyQualifiedJavaType.getIntInstance());
		method.setVisibility(org.mybatis.generator.api.dom.java.JavaVisibility.PUBLIC);
		method.setAbstract(true);

		// 添加详细的 JavaDoc 注释
		method.addJavaDocLine("/**");
		method.addJavaDocLine(" * 根据主键动态更新指定字段");
		method.addJavaDocLine(" * <p>通过Map参数指定要更新的字段名和对应的值，只更新Map中包含的字段</p>");
		method.addJavaDocLine(" * ");

		// 动态生成主键参数说明
		for (IntrospectedColumn column : introspectedTable.getPrimaryKeyColumns()) {
			method.addJavaDocLine(" * @param " + column.getJavaProperty() + " " + getColumnComment(column) + "（主键）");
		}

		method.addJavaDocLine(" * @param params 要更新的字段Map，key为数据库字段名，value为新值");
		method.addJavaDocLine(" * @return 更新的记录数");
		method.addJavaDocLine(" * ");
		method.addJavaDocLine(" * @note ");
		method.addJavaDocLine(" * 1. 字段名必须与数据库列名一致");
		method.addJavaDocLine(" * 2. 字段值类型需要与数据库字段类型兼容");
		method.addJavaDocLine(" * 3. 主键字段不会被更新");
		method.addJavaDocLine(" * 4. 如果params为空或不包含任何有效字段，将不执行更新操作");
		method.addJavaDocLine(" * ");
		method.addJavaDocLine(" * @mbg.generated");
		method.addJavaDocLine(" */");

		// 添加主键参数
		for (IntrospectedColumn column : introspectedTable.getPrimaryKeyColumns()) {
			FullyQualifiedJavaType type = column.getFullyQualifiedJavaType();
			Parameter parameter = new Parameter(type, column.getJavaProperty());
			parameter.addAnnotation("@Param(\"" + column.getJavaProperty() + "\")");
			method.addParameter(parameter);
		}

		// 添加Map参数
		FullyQualifiedJavaType mapType = new FullyQualifiedJavaType("java.util.Map<String,Object>");
		Parameter mapParameter = new Parameter(mapType, "params");
		mapParameter.addAnnotation("@Param(\"params\")");
		method.addParameter(mapParameter);

		return method;
	}

	/**
	 * 获取列的注释，如果没有注释则返回列名
	 */
	private String getColumnComment(IntrospectedColumn column) {
		String remarks = column.getRemarks();
		if (remarks != null && !remarks.trim().isEmpty()) {
			return remarks.trim();
		}
		return column.getActualColumnName();
	}
}