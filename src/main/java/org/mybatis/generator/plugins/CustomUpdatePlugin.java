package org.mybatis.generator.plugins;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.Interface;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.xml.Attribute;
import org.mybatis.generator.api.dom.xml.Document;
import org.mybatis.generator.api.dom.xml.TextElement;
import org.mybatis.generator.api.dom.xml.XmlElement;
import org.mybatis.generator.codegen.mybatis3.MyBatis3FormattingUtilities;

/**
 * 在配置文件中指定表名、方法名和要更新的字段，
 * 来生成自定义的更新方法和XML。
 */
public class CustomUpdatePlugin extends PluginAdapter {

	private Map<String, List<CustomUpdateConfig>> tableUpdateConfigs = new HashMap<>();

    @Override
    public boolean validate(List<String> warnings) {
		parseConfigurations();
        return true;
    }

	private void parseConfigurations() {
		if (properties != null) {
			for (String key : properties.stringPropertyNames()) {
				if (key.startsWith("updateFields.")) {
					String[] parts = key.split("\\.");
					if (parts.length == 3) {
						String tableName = parts[1];
						String methodName = parts[2];
						String fieldsStr = properties.getProperty(key);

						List<String> fields = Arrays.asList(fieldsStr.split(","));
						for (int i = 0; i < fields.size(); i++) {
							fields.set(i, fields.get(i).trim());
						}

						CustomUpdateConfig config = new CustomUpdateConfig(methodName, fields);

						tableUpdateConfigs.computeIfAbsent(tableName, k -> new ArrayList<>()).add(config);
					}
				}
			}
		}
    }

	/**
	 * 获取实际的表名
	 */
	private String getActualTableName(IntrospectedTable introspectedTable) {
		return introspectedTable.getFullyQualifiedTableNameAtRuntime();
	}

	@Override
	public boolean sqlMapDocumentGenerated(Document document, IntrospectedTable introspectedTable) {
		String actualTableName = getActualTableName(introspectedTable);
		List<CustomUpdateConfig> configs = tableUpdateConfigs.get(actualTableName);

		if (configs != null && !configs.isEmpty()) {
			XmlElement rootElement = document.getRootElement();

			for (CustomUpdateConfig config : configs) {
				XmlElement updateElement = generateCustomUpdateXml(config, introspectedTable);
				if (updateElement != null) {
					rootElement.addElement(updateElement);
				}
			}
		}

		return true;
	}

	@Override
	public boolean clientGenerated(Interface interfaze, IntrospectedTable introspectedTable) {
		String actualTableName = getActualTableName(introspectedTable);
		List<CustomUpdateConfig> configs = tableUpdateConfigs.get(actualTableName);

		if (configs != null && !configs.isEmpty()) {
			for (CustomUpdateConfig config : configs) {
				Method method = generateCustomUpdateMethod(config, introspectedTable);
				if (method != null) {
					interfaze.addMethod(method);
				}
			}
		}

		return true;
	}


	private XmlElement generateCustomUpdateXml(CustomUpdateConfig config, IntrospectedTable introspectedTable) {
		// 验证字段是否存在
		List<IntrospectedColumn> updateColumns = new ArrayList<>();
		List<IntrospectedColumn> allColumns = introspectedTable.getAllColumns();

		for (String fieldName : config.getFields()) {
			IntrospectedColumn column = findColumnByJavaProperty(allColumns, fieldName);
			if (column != null) {
				updateColumns.add(column);
			} else {
				System.out.println("Warning: Field '" + fieldName + "' not found in table "
						+ introspectedTable.getTableConfiguration().getTableName());
				return null;
			}
		}

		if (updateColumns.isEmpty()) {
			return null;
		}

		XmlElement updateElement = new XmlElement("update");
		updateElement.addAttribute(new Attribute("id", config.getMethodName()));

		// 添加注释
		updateElement.addElement(new TextElement("<!--"));
		updateElement.addElement(new TextElement("  WARNING - @mbg.generated"));
		updateElement.addElement(new TextElement("  This element is automatically generated by MyBatis Generator, do not modify."));
		updateElement.addElement(new TextElement("-->"));

		// UPDATE语句
		StringBuilder sb = new StringBuilder();
		sb.append("update ");
		sb.append(introspectedTable.getFullyQualifiedTableNameAtRuntime());
		updateElement.addElement(new TextElement(sb.toString()));

		// SET子句
		sb.setLength(0);
		sb.append("set ");

		for (int i = 0; i < updateColumns.size(); i++) {
			IntrospectedColumn column = updateColumns.get(i);

			if (i > 0) {
				sb.append(",");
				updateElement.addElement(new TextElement(sb.toString()));
				sb.setLength(0);
				sb.append("  ");
			}

			sb.append(MyBatis3FormattingUtilities.getEscapedColumnName(column));
			sb.append(" = ");
			sb.append("#{").append(column.getJavaProperty());
			if (column.getJdbcTypeName() != null) {
				sb.append(",jdbcType=").append(column.getJdbcTypeName());
			}
			sb.append("}");

			if (i == updateColumns.size() - 1) {
				updateElement.addElement(new TextElement(sb.toString()));
			}
		}

		// WHERE子句
		boolean and = false;
		for (IntrospectedColumn column : introspectedTable.getPrimaryKeyColumns()) {
			sb.setLength(0);
			if (and) {
				sb.append("  and ");
			} else {
				sb.append("where ");
				and = true;
			}

			sb.append(MyBatis3FormattingUtilities.getEscapedColumnName(column));
			sb.append(" = ");
			sb.append("#{").append(column.getJavaProperty());
			if (column.getJdbcTypeName() != null) {
				sb.append(",jdbcType=").append(column.getJdbcTypeName());
			}
			sb.append("}");
			updateElement.addElement(new TextElement(sb.toString()));
		}

		return updateElement;
	}

	private Method generateCustomUpdateMethod(CustomUpdateConfig config, IntrospectedTable introspectedTable) {
		// 验证字段是否存在
		List<IntrospectedColumn> updateColumns = new ArrayList<>();
		List<IntrospectedColumn> allColumns = introspectedTable.getAllColumns();

		for (String fieldName : config.getFields()) {
			IntrospectedColumn column = findColumnByJavaProperty(allColumns, fieldName);
			if (column != null) {
				updateColumns.add(column);
			}
		}

		if (updateColumns.isEmpty()) {
			return null;
		}

		Method method = new Method(config.getMethodName());
		method.setReturnType(FullyQualifiedJavaType.getIntInstance());
		method.setVisibility(org.mybatis.generator.api.dom.java.JavaVisibility.PUBLIC);
		method.setAbstract(true);

		// 添加 @mbg.generated 注释
		method.addJavaDocLine("/**");
		method.addJavaDocLine(" * @mbg.generated");
		method.addJavaDocLine(" */");

		// 添加参数
		// 主键参数
		for (IntrospectedColumn column : introspectedTable.getPrimaryKeyColumns()) {
			FullyQualifiedJavaType type = column.getFullyQualifiedJavaType();
			Parameter parameter = new Parameter(type, column.getJavaProperty());
			parameter.addAnnotation("@Param(\"" + column.getJavaProperty() + "\")");
			method.addParameter(parameter);
		}

		// 要更新的字段参数
		for (IntrospectedColumn column : updateColumns) {
			FullyQualifiedJavaType type = column.getFullyQualifiedJavaType();
			Parameter parameter = new Parameter(type, column.getJavaProperty());
			parameter.addAnnotation("@Param(\"" + column.getJavaProperty() + "\")");
			method.addParameter(parameter);
		}

		return method;
	}

	private IntrospectedColumn findColumnByJavaProperty(List<IntrospectedColumn> columns, String javaProperty) {
		for (IntrospectedColumn column : columns) {
			if (column.getJavaProperty().equals(javaProperty)) {
				return column;
			}
		}
		return null;
    }

	private static class CustomUpdateConfig {
		private String methodName;
		private List<String> fields;

		public CustomUpdateConfig(String methodName, List<String> fields) {
			this.methodName = methodName;
			this.fields = fields;
		}

		public String getMethodName() {
			return methodName;
		}

		public List<String> getFields() {
			return fields;
        }
    }
}